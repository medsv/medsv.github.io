from scipy import optimize
from saturationcurve import SaturationCurve

"""
Определение теплофизических свойств влажного воздуха:
1. Температура мокрого термометра;
2. Относительная влажность по температуре мокрого термометра;
3. Влагосодержание;
4. Энталтпия.
"""

__author__ = "Sergey Medvedev"
__copyright__ = "Sergey Medvedev, 2020"
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "Sergey Medvedev"
__email__ = "medsv@yandex.ru"
__status__ = "Production"

#Класс для определения температуры и давления насыщения водяного пара
sc = SaturationCurve()

def calc_t_wb(t, RH, p=101325):
    """
    Вычисление температуры мокрого термометра, С
    t - температура воздуха (сухой термометр), С
    RH - относительная влажность [0; 1] или [0; 100]
    p - давление воздуха, Па (по умолчанию - нормальное атмосферное давление)
    """
    RH = __check_RH(RH)
    if RH == 1:
        return t  # иначе root_scalar будет делать много итераций при поиске решения
    if t < 1e-5:
        raise ValueError('Значение температуры должно быть выше 1e-5 C')  # ограничение SaturationCurve
    I_t = __calc_I(t, RH, p)
    a = 1e-5  # нижняя граница диапазона поиска t_wb (ограничение SaturationCurve)
    b = t  # верхняя граница диапазона поиска t_wb
    I_test = calc_I(a, 1., p)
    if I_test > I_t:
        raise ValueError('Недопустимые значения пары параметров t и RH. ' +
                         'Температура мокрого термометра ниже 1e-5 C.')
    def f (t, p, I_t):
        """
        Функция для передачи в optimize.root_scalar.
        При t = t_wb функция возвращает ноль (энтальпия воздуха с RH = 1. (100%)
        равна энтальпии воздуха с заданными параметрами).
        """
        return I_t - __calc_I(t, 1., p)
    # Поиск решения
    sol = optimize.root_scalar(f, args=(p, I_t), bracket=[a, b])
    return sol.root

def calc_RH(t, t_wb, p = 101325):
    """
    Вычисление относительной влажности, [0.; 1.]
    t - температура воздуха (сухой термометр), С
    t_wb - температура мокрого термометра, С
    p - давление воздуха, Па
    """
    if t_wb > t:
        raise ValueError('Значение температуры мокрого термометра не может быть больше ' +
                         'значения температуры сухого термометра.')
    elif t == t_wb:
        return 1.
    I_wb = __calc_I(t_wb, 1., p)
    I_test = __calc_I(t, 0., p)
    if I_wb < I_test:
        raise ValueError('Задано слишком низкое значение температуры влажного термометра.')
    a = 0   # нижняя граница диапазона поиска RH
    b = 1.  # верхняя граница диапазона поиска RH

    def f (RH, t, p, I_wb):
        """
        Функция для передачи в optimize.root_scalar
        """
        return I_wb - __calc_I(t, RH, p)
    # Поиск решения
    sol = optimize.root_scalar(f, args=(t, p, I_wb), bracket=[a, b])
    return sol.root

def calc_d(t, RH, p = 101325):
    """
    Вычисление влагосодержания, г/(кг с. в.)
    t - температура воздуха (сухой термометр), С
    RH - относительная влажность [0; 1] или [0; 100]
    p - давление воздуха, Па
    """
    RH = __check_RH(RH)
    return __calc_d(t, RH, p)

def __calc_d(t, RH, p):
    p_s = __calc_p_s(t)
    p_st = RH * p_s
    d = 621 * p_st / (p - p_st)
    return d

def calc_I(t, RH, p =101325):
    """
    Вычисление энтальпии, Дж/кг
    t - температура воздуха (сухой термометр), С
    RH - относительная влажность [0; 1] или [0; 100]
    p - давление воздуха, Па
    """
    RH = __check_RH(RH)
    return __calc_I(t, RH, p)

def __calc_I(t, RH, p):
    d = calc_d(t, RH, p)
    p_s = __calc_p_s(t)  # Давление насыщения при температуре t
    p_st = p_s * RH  # Парциальное давление пара
    r = __calc_latent_heat(p_st)
    c_da = __calc_cp_da(t, p - p_st)
    c_st = __calc_cp_st(t, p_st)
    I = c_da * t + (r + c_st * t) * d / 1000
    return I * 1e3  # Перевод в Дж/кг

def __calc_latent_heat(p_s):
    """
    Расчёт скрытой теплоты парообразования, кДж/кг
    p_s - давление насыщения водяного пара, Па
    """
    return 2500


def __check_RH(RH):
    """
    Проверка корректности ввода значения относительной влажности
    """
    if RH > 1:
        RH /= 100
    if not (0 <= RH <=1.):
        raise ValueError('Параметр RH должен находиться в диапазоне [0; 1] либо [0, 100]')
    return RH

def __calc_cp_da(t, p):
    """
    Вычисление теплоёмкости сухого воздуха при постоянном давлении, кДж/кг/К
    t - температура влажного воздуха, C
    p - парциальное давление сухого воздуха, Па
    """
    return 1.0048

def __calc_cp_st(t, p):
    """
    Вычисление теплоёмкости водяного пара при постоянном давлении, кДж/кг/К
    t - температура влажного воздуха, C
    p - парциальное давление пара, Па
    """
    return 1.8068

def __calc_p_s (t):
    """
    Вычисление давления насыщения водяного пара по температуое, Па
    t - температура, С
    """
    return sc.p_t(t)

def __calc_ts (p):
    """
    Вычисление температуры насыщения водяного пара по давлению, С
    p - давление, Па
    """
    return sc.t_p(p)

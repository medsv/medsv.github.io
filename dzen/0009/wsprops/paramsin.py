"""
В модуле размещён класс ParamsIn, содержащий методы, предназначенные для определения границ области
"""
__author__ = "Sergey Medvedev"
__copyright__ = "Sergey Medvedev, 2020"
__license__ = "GPL"
__version__ = "1.1"
__maintainer__ = "Sergey Medvedev"
__email__ = "medsv@yandex.ru"
__status__ = "Production"

from saturationcurve import SaturationCurve


class ParamsIn:
    """
    Класс содержит методы, предназначенные для определения границ области
    """
    sc = SaturationCurve()

    def __init__(self):
        """
         Инициализация словаря теплофизических свойств:
         давление, Па
         температура, К
         удельный объём, м3/кг
         удельная внутренняя энергия, Дж/кг
         удельная эниропия, Дж/кг/К
         удельная энтальпия, Дж/кг
         удельная изохорная теплоёмкость,
         удельная изобарная теплоёмкость
         скорость звука, м/с
         степень сухости влажного воздуха (-1 для воды, 2 для перегретого пара)
         """
        self.props = {
            'T': None,
            'p': None,
            'h': None,
            's': None,
            'cp': None,
            'cv': None,
            'v': None,
            'u': None,
            'w': None,
            'x': None
        }
        """Инициализация граничных значений температур и давлений"""
        """Минимальное значение температуры, K"""
        self.T_min = 273.15
        """Максимальное значение температуры, K"""
        self.T_max = 1073.15
        """Минимальное значение давления, Па"""
        self.p_min = self.sc.p_T(self.T_min)
        """Максимальное значение давления, Па"""
        self.p_max = 100e6
        """Верхнее значение давления при котором кривая насыщения ещё является границей между областями 1 и 2"""
        self.p_s_marg = self.sc.p_T(623.15)

    def p_in(self, p):
        """
        Проверка нахождения значения давления внутри допустимого диапазона
        :param p: давление, Па
        :return: True если давление находится внутри допустимого диапазона, False в противном сучае
        """
        return self.p_min <= p <= self.p_max

    def T_in(self, T):
        """
        Проверка нахождения значения температуры внутри допустимого диапазона
        :param T: температура, К
        :return: True если температура находится внутри допустимого диапазона, False в противном сучае
        """
        return self.T_min <= T <= self.T_max

    def t_in(self, t):
        """
        Проверка нахождения значения температуры внутри допустимого диапазона
        :param t: температура, C
        :return: True если температура находится внутри допустимого диапазона, False в противном сучае
        """
        return self.T_in(t + 273.15)

    def x_in(self, x):
        """
        Проверка нахождения точки в области влажного пара
        :param x: степень сухости
        :return: True если значение x лежит в диапазоне [0; 1], False в противном сучае
        """
        return 0. <= x <= 1.

    def _get_T_edges(self, p):
        """
        Абстрактный метод.
        Определение граничных значений температуры в области при давлении p
        :param p: давление, Па
        :return: (T_lower, T_upper) - нижнее и верхнее значения температуры, К
        """
        raise NotImplementedError('Метод должен быть переопределён')

    def _get_h_edges(self, p):
        """
        Абстрактный метод.
        Определение граничных значений энтальпий в области при давлении p
        :param p: давление, Па
        :return: (h_lower, h_upper) - нижнее и верхнее значения энтальпии, КДж/кг
        """
        raise NotImplementedError('Метод должен быть переопределён')

    def _get_s_edges(self, p):
        """
        Абстрактный метод.
        Определение граничных значений энтропии в области при давлении p
        :param p: давление, Па
        :return: (p_lower, p_upper) - нижнее и верхнее значения энтропии, КДж/кг/К
        """
        raise NotImplementedError('Метод должен быть переопределён')

    def Tp_in(self, T, p):
        """
        Проверка нахождения пары параметров [T, p] в пределах области
        :param T: температура, К
        :param p: давление, Па
        :return: True если точка находится внутри области, False в противном сучае
        """
        if not (self.p_in(p) and self.T_in(T)):
            return False
        T_lower, T_upper = self._get_T_edges(p)
        return T_lower <= T <= T_upper

    def tp_in(self, t, p):
        """
        Проверка нахождения пары параметров [t, p] в пределах области
        :param t: температура, С
        :param p: давление, Па
        :return: True если точка находится внутри области, False в противном сучае
        """
        return self.Tp_in(t + 273.15, p)

    def ph_in(self, p, h):
        """
        Проверка нахождения пары параметров [p, h] в пределах области
        :param p: давление, Па
        :param h: энтальпия, Дж/кг
        :return: True если точка находится внутри области, False в противном сучае
        """
        return self._pX_in(p, h, 'h')

    def ps_in(self, p, s):
        """
        Проверка нахождения пары параметров [p, s] в пределах области
        :param p: давление, Па
        :param s: энтропия, Дж/кг/К
        :return: True если точка находится внутри области, False в противном сучае
        """
        return self._pX_in(p, s, 's')

    def _pX_in(self, p, value, X):
        """
        Абстрактный метод.
        Проверка нахождения пары параметров [p, h] или [p, s] в пределах области
        :param p: давление, Па
        :param value: значение второго параметра (h, Дж/кг или s, Дж/кг/К)
        :param X: 'h' или 's'
        :return: True если точка находится внутри области, False в противном случае
        """
        raise NotImplementedError('Метод должен быть переопределён')

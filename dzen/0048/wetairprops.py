"""
Определение теплофизических свойств влажного воздуха:
1. Температура мокрого термометра;
2. Температура точки росы;
2. Влагосодержание;
3. Относительная влажность;
4. Плотность;
5. Энтальпия.
Для определения упругости (давления насыщения) пара вместо SaturationCurve
используется методика из СПРАВОЧНОЕ ПОСОБИЕ. Влажный воздух.
НП «Инженеры по отоплению, вентиляции, кондиционированию воздуха,
теплоснабжению и строительной теплофизике» (НП «АВОК»)
https://files.stroyinf.ru/Data1/44/44694/
Диапазон допустимых температур от -100 до +200.
"""

__author__ = "Сергей Медведев"
__copyright__ = "Сергей Медведев, 2022"
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Сергей Медведев"
__email__ = "medsv@yandex.ru"
__status__ = "Production"

from scipy import optimize
from math import exp, log
R = 8.314  # Универсальная газовая постоянная, Дж/(моль*К)
mu_st = 18.  # Молярная масса водяного пара, г/моль
mu_da = 29.  # Молярная масса сухого воздуха, г/моль


def calc_t_wb(t, RH, p=101325):
    """
    Определение температуры мокрого терммометра по влагосодержанию
    t: температура воздуха (сухой термометр), С
    RH: относительная влажность [0; 1]
    p: давление воздуха, Па (по умолчанию - нормальное атмосферное давление)
    return: t_wb - температура мокрого термометра, С
    """
    __check_RH(RH)
    if RH == 1:
        return t  # иначе root_scalar будет делать много итераций при поиске решения
    a = -100  # нижняя граница диапазона поиска t_wb (ограничение методики расчёта)
    I_t = __calc_I(t, RH, p)
    
    b = t  # верхняя граница диапазона поиска t_wb
    I_test = calc_I(a, 1., p)
    if I_test > I_t:
        raise ValueError('Недопустимые значения пары параметров t и RH. ' +
                         'Температура мокрого термометра ниже -100 C.')
    def f (t, p, I_t):
        """
        Функция для передачи в optimize.root_scalar.
        При t = t_wb функция возвращает ноль (энтальпия влажного воздуха с RH = 1. (100%)
        равна энтальпии воздуха с заданными параметрами).
        """
        return I_t - __calc_I(t, 1., p)
    # Поиск решения
    sol = optimize.root_scalar(f, args=(p, I_t), bracket=[a, b])
    return sol.root

def calc_t_wb_d(t, d, p=101325):
    """
    Определение температуры мокрого терммометра
    t: температура воздуха (сухой термометр), С
    d: влагосодержание, г на кг сухого воздуха
    p: давление воздуха, Па (по умолчанию - нормальное атмосферное давление)
    return: t_wb - температура мокрого термометра, С
    """    
    RH = calc_RH_d(t, d, p)
    return calc_t_wb(t, RH, p)
    

def calc_t_dp(t, RH, p=101325):
    """
    Определение температуры точки росы
    t: температура воздуха (сухой термометр), С
    RH: относительная влажность [0; 1]
    p: давление воздуха, Па (по умолчанию - нормальное атмосферное давление)
    return: t_dp - температура точки росы, С
    """
    __check_RH(RH)
    d = calc_d(t, RH, p)
    return calc_t_dp_d(d, p)
    
def calc_t_dp_d(d, p=101325):
    """
    Определение температуры точки росы по влагосодержанию
    d: влагосодержание, г на кг сухого воздуха
    p: давление воздуха, Па (по умолчанию - нормальное атмосферное давление)
    return: t_dp - температура точки росы, С
    """    
    p_st =  calc_p_st_d(d, p)  # парциальное давление пара
    return calc_t_s(p_st)
    

def calc_RH_t_dp(t, t_dp):
    """
    Определение относительной влажности по температуре точки росы
    t: температура воздуха (сухой термометр), С
    t_dp: температура точки росы, С
    return: относительная влажность воздуха [0.; 1.]
    """
    p_s = calc_p_s(t)  # давление насыщения
    p_st = calc_p_s(t_dp)  # парциальное давление пара
    return p_st / p_s
    

def calc_RH_d(t, d, p = 101325):
    """
    Определение относительной влажности по влагосодержанию
    t: температура воздуха (сухой термометр), С
    d: влагосодержание, г на кг сухого воздуха
    p: давление влажного воздуха, Па (по умолчанию - нормальное атмосферное давление)
    return: относительная влажность воздуха, [0.; 1.]
    """    
    p_st = calc_p_st_d(d, p)  # парциальное давление пара
    p_s = calc_p_s(t)  # давление насыщения
    RH = p_st / p_s
    if RH > 1.:
        raise ValueError('При заданных значениях параметров t, d, p относительная влажность получается более 100%') 
    return RH

  
def calc_RH_t_wb(t, t_wb, p = 101325):
    """
    Определение относительной влажности по температуре мокрого термометра
    t: температура воздуха (сухой термометр), С
    t_wb: температура мокрого термометра, С
    p: давление влажного воздуха, Па (по умолчанию - нормальное атмосферное давление)
    return: относительная влажность воздуха, [0.; 1.]
    """
    if t_wb > t:
        raise ValueError('Значение температуры мокрого термометра не может быть больше ' +
                         'значения температуры сухого термометра.')
    elif t == t_wb:
        return 1.
    I_wb = __calc_I(t_wb, 1., p)
    I_test = __calc_I(t, 0., p)
    if I_wb < I_test:
        raise ValueError('Задано слишком низкое значение температуры мокрого термометра.')
    a = 0   # нижняя граница диапазона поиска RH
    b = 1.  # верхняя граница диапазона поиска RH

    def f (RH, t, p, I_wb):
        """
        Функция для передачи в optimize.root_scalar
        """
        return I_wb - __calc_I(t, RH, p)
    # Поиск решения
    sol = optimize.root_scalar(f, args=(t, p, I_wb), bracket=[a, b])
    return sol.root
    
def calc_p_st_d(d, p = 101325):
    """
    Определение парциального давления пара
    d: влагосодержание, г на кг сухого воздуха
    p: давление влажного воздуха, Па (по умолчанию - нормальное атмосферное давление)
    return: p_st - парциальное давление пара, Па
    """
    A = d / 1000 * mu_da / mu_st
    p_st = p * A / (1 + A)
    return p_st    

def calc_d(t, RH, p = 101325):
    """
    Определение влагосодержания, г/(кг с. в.)
    t: температура воздуха (сухой термометр), С
    RH: относительная влажность [0; 1]
    p: давление воздуха, Па (по умолчанию - нормальное атмосферное давление)
    return: d - влагосодержание, г/кг сух. возд.
    """
    __check_RH(RH)
    return __calc_d(t, RH, p)

def __calc_d(t, RH, p):
    p_s = calc_p_s(t)
    p_st = RH * p_s
    d = 1000 * p_st / (p - p_st) * mu_st / mu_da
    return d

def calc_I(t, RH, p =101325):
    """
    Определение энтальпии, Дж/кг
    t: температура воздуха (сухой термометр), С
    RH: относительная влажность [0; 1]
    p: давление влажного воздуха, Па (по умолчанию - нормальное атмосферное давление)
    """
    __check_RH(RH)
    return __calc_I(t, RH, p)

def __calc_I(t, RH, p):
    d = __calc_d(t, RH, p)
    p_s = calc_p_s(t)  # Давление насыщения при температуре t
    p_st = p_s * RH  # Парциальное давление пара
    r = __calc_latent_heat(p_st)
    c_da = __calc_cp_da(t, p - p_st)
    c_st = __calc_cp_st(t, p_st)
    I = c_da * t + (r + c_st * t) * d / 1000
    return I * 1e3  # Перевод в Дж/кг



def calc_p_s (t):
    """
    Определение упругости насыщенного водяного пара (давления насыщения)
    t: температура водяного пара, С
    return: p_s - давление насыщения, Па
    Источник: https://files.stroyinf.ru/Data1/44/44694/
    """
    # ограничение методики расчёта упругости пара
    if t < -100 or t > 200:
        raise ValueError('Значение температуры должно находиться в диапазоне [-100; +200] C')  
    T = t + 273.15
    if t < 0:
        C1= -5.6745359e3; C2 = 6.3925247; C3 = -9.677843e-3; C4 = 6.2215701e-7
        C5= 2.0747825e-9; C6 = -9.484024e-13; C7 =  4.1635019
    else:
        C1 = -5.8002206e3; C2 = 1.3914993; C3 = -4.8640239e-2; C4 = 4.1764768e-5
        C5 = -1.4452093e-8; C6 = 0.; C7 = 6.5459673
    return exp(C1/T + C2 + C3*T + C4*T*T+ C5*T**3 + C6*T**4 + C7*log(T))

def calc_t_s (p):
    """
    Определение температуры насыщения водяного пара при заданном давлении
    Функция обратная calc_p_s.
    p: давление водяного пара, Па
    return: t_s - температура насыщения, С
    """
    t_est = 0.  # первое приближение
    return optimize.newton(lambda t: p-calc_p_s(t), t_est)
    
def calc_dens(t, RH, p=101325):
    """
    Определение плотности влажного воздуха
    t: температура, Па
    p: давление влажного воздуха, Па (по умолчанию - нормальное атмосферное давление)
    RH: относительная влажность [0; 1]
    return: плотность влажного воздуха, кг/м3
    """  
    __check_RH(RH)
    p_s = calc_p_s (t)
    p_st = RH * p_s
    p_da = p - p_st
    dens = (mu_st * p_st + mu_da * p_da) / R / (t + 273.15)
    return dens
    
def calc_dens_d(t, d, p=101325):
    """
    Определение плотности влажного воздуха по влагосодержанию
    t: температура, Па
    d: влагосодержание, г на кг сухого воздуха
    RH: относительная влажность [0; 1]
    return: плотность влажного воздуха, кг/м3
    """
    return calc_dens(t, calc_RH_d(t, d, p), p)

def __calc_latent_heat(p_s):
    """
    Определение скрытой теплоты парообразования
    p_s: давление насыщения водяного пара, Па
    return: скрытая теплота парообразования, кДж/кг
    """
    return 2500

def __calc_cp_da(t, p):
    """
    Определение теплоёмкости сухого воздуха при постоянном давлении
    t - температура влажного воздуха, C
    p - парциальное давление сухого воздуха, Па
    return: теплоёмкость, кДж/кг/К
    """
    return 1.005

def __calc_cp_st(t, p):
    """
    Определение теплоёмкости водяного пара при постоянном давлении, кДж/кг/К
    t - температура влажного воздуха, C
    p - парциальное давление пара, Па
    return: теплоёмкость, кДж/кг/К
    """
    return 1.861
    
def __check_RH(RH):
    """
    Проверка корректности ввода значения относительной влажности
    RH: относительная влажность
    """
    if not (0 <= RH <=1.):
        raise ValueError('Параметр RH должен находиться в диапазоне [0; 1] либо (1, 100]')
    return True

